// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.confidentialledger.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ConfidentialLedgers. */
public final class ConfidentialLedgersImpl {
    /** The proxy service used to perform REST calls. */
    private final ConfidentialLedgersService service;

    /** The service client containing this operation class. */
    private final ConfidentialLedgerClientImpl client;

    /**
     * Initializes an instance of ConfidentialLedgersImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ConfidentialLedgersImpl(ConfidentialLedgerClientImpl client) {
        this.service =
                RestProxy.create(
                        ConfidentialLedgersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ConfidentialLedgerClientConfidentialLedgers to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{ledgerUri}")
    @ServiceInterface(name = "ConfidentialLedgerCl")
    private interface ConfidentialLedgersService {
        @Get("/app/governance/constitution")
        Mono<Response<BinaryData>> getConstitution(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions);

        @Get("/app/governance/members")
        Mono<Response<BinaryData>> getConsortiumMembers(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions);

        @Get("/app/enclaveQuotes")
        Mono<Response<BinaryData>> getEnclaveQuotes(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions);

        @Get("/app/transactions")
        Mono<Response<BinaryData>> getLedgerEntries(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions);

        @Post("/app/transactions")
        Mono<Response<BinaryData>> postLedgerEntry(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions);

        @Get("/app/transactions/{transactionId}")
        Mono<Response<BinaryData>> getLedgerEntry(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("transactionId") String transactionId,
                RequestOptions requestOptions);

        @Get("/app/transactions/{transactionId}/receipt")
        Mono<Response<BinaryData>> getReceipt(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("transactionId") String transactionId,
                RequestOptions requestOptions);

        @Get("/app/transactions/{transactionId}/status")
        Mono<Response<BinaryData>> getTransactionStatus(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("transactionId") String transactionId,
                RequestOptions requestOptions);

        @Get("/app/transactions/current")
        Mono<Response<BinaryData>> getCurrentLedgerEntry(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions);

        @Delete("/app/users/{userId}")
        Mono<Response<Void>> deleteUser(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("userId") String userId,
                RequestOptions requestOptions);

        @Get("/app/users/{userId}")
        Mono<Response<BinaryData>> getUser(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("userId") String userId,
                RequestOptions requestOptions);

        @Patch("/app/users/{userId}")
        Mono<Response<BinaryData>> createOrUpdateUser(
                @HostParam("ledgerUri") String ledgerUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("userId") String userId,
                @BodyParam("application/json") BinaryData userDetails,
                RequestOptions requestOptions);

        @Get("{nextLink}")
        Mono<Response<BinaryData>> getLedgerEntriesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("ledgerUri") String ledgerUri,
                RequestOptions requestOptions);
    }

    /**
     * The constitution is a script that assesses and applies proposals from consortium members.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     digest: String
     *     script: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the governance script for the application.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConstitutionWithResponseAsync(RequestOptions requestOptions) {
        return service.getConstitution(this.client.getLedgerUri(), this.client.getApiVersion(), requestOptions);
    }

    /**
     * The constitution is a script that assesses and applies proposals from consortium members.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     digest: String
     *     script: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the governance script for the application.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getConstitutionAsync(RequestOptions requestOptions) {
        return getConstitutionWithResponseAsync(requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * The constitution is a script that assesses and applies proposals from consortium members.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     digest: String
     *     script: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the governance script for the application.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getConstitution(RequestOptions requestOptions) {
        return getConstitutionAsync(requestOptions).block();
    }

    /**
     * Consortium members can manage the Confidential Ledger.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     members: [
     *         {
     *             certificate: String
     *             id: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return list of members in the consortium.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getConsortiumMembersWithResponseAsync(RequestOptions requestOptions) {
        return service.getConsortiumMembers(this.client.getLedgerUri(), this.client.getApiVersion(), requestOptions);
    }

    /**
     * Consortium members can manage the Confidential Ledger.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     members: [
     *         {
     *             certificate: String
     *             id: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return list of members in the consortium.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getConsortiumMembersAsync(RequestOptions requestOptions) {
        return getConsortiumMembersWithResponseAsync(requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Consortium members can manage the Confidential Ledger.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     members: [
     *         {
     *             certificate: String
     *             id: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return list of members in the consortium.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getConsortiumMembers(RequestOptions requestOptions) {
        return getConsortiumMembersAsync(requestOptions).block();
    }

    /**
     * A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentNodeId: String
     *     enclaveQuotes: {
     *         String: {
     *             nodeId: String
     *             mrenclave: String
     *             quoteVersion: String
     *             raw: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return information about the enclaves running the Confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEnclaveQuotesWithResponseAsync(RequestOptions requestOptions) {
        return service.getEnclaveQuotes(this.client.getLedgerUri(), this.client.getApiVersion(), requestOptions);
    }

    /**
     * A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentNodeId: String
     *     enclaveQuotes: {
     *         String: {
     *             nodeId: String
     *             mrenclave: String
     *             quoteVersion: String
     *             raw: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return information about the enclaves running the Confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getEnclaveQuotesAsync(RequestOptions requestOptions) {
        return getEnclaveQuotesWithResponseAsync(requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentNodeId: String
     *     enclaveQuotes: {
     *         String: {
     *             nodeId: String
     *             mrenclave: String
     *             quoteVersion: String
     *             raw: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return information about the enclaves running the Confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getEnclaveQuotes(RequestOptions requestOptions) {
        return getEnclaveQuotesAsync(requestOptions).block();
    }

    /**
     * A sub-ledger id may optionally be specified. Only entries in the specified (or default) sub-ledger will be
     * returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     *     <tr><td>fromTransactionId</td><td>String</td><td>No</td><td>Specify the first transaction ID in a range.</td></tr>
     *     <tr><td>toTransactionId</td><td>String</td><td>No</td><td>Specify the last transaction ID in a range.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     nextLink: String
     *     entries: [
     *         {
     *             contents: String
     *             subLedgerId: String
     *             transactionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return paginated ledger entries returned in response to a query.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getLedgerEntriesSinglePageAsync(RequestOptions requestOptions) {
        return service.getLedgerEntries(this.client.getLedgerUri(), this.client.getApiVersion(), requestOptions)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "entries"),
                                        getNextLink(res.getValue(), "@nextLink"),
                                        null));
    }

    /**
     * A sub-ledger id may optionally be specified. Only entries in the specified (or default) sub-ledger will be
     * returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     *     <tr><td>fromTransactionId</td><td>String</td><td>No</td><td>Specify the first transaction ID in a range.</td></tr>
     *     <tr><td>toTransactionId</td><td>String</td><td>No</td><td>Specify the last transaction ID in a range.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     nextLink: String
     *     entries: [
     *         {
     *             contents: String
     *             subLedgerId: String
     *             transactionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return paginated ledger entries returned in response to a query.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getLedgerEntriesAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> getLedgerEntriesSinglePageAsync(requestOptions),
                nextLink -> getLedgerEntriesNextSinglePageAsync(nextLink, null));
    }

    /**
     * A sub-ledger id may optionally be specified. Only entries in the specified (or default) sub-ledger will be
     * returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     *     <tr><td>fromTransactionId</td><td>String</td><td>No</td><td>Specify the first transaction ID in a range.</td></tr>
     *     <tr><td>toTransactionId</td><td>String</td><td>No</td><td>Specify the last transaction ID in a range.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     nextLink: String
     *     entries: [
     *         {
     *             contents: String
     *             subLedgerId: String
     *             transactionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return paginated ledger entries returned in response to a query.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getLedgerEntries(RequestOptions requestOptions) {
        return new PagedIterable<>(getLedgerEntriesAsync(requestOptions));
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     subLedgerId: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return returned as a result of a write to the Confidential Ledger, the transaction id in the response indicates
     *     when the write will become durable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> postLedgerEntryWithResponseAsync(RequestOptions requestOptions) {
        return service.postLedgerEntry(this.client.getLedgerUri(), this.client.getApiVersion(), requestOptions);
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     subLedgerId: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return returned as a result of a write to the Confidential Ledger, the transaction id in the response indicates
     *     when the write will become durable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> postLedgerEntryAsync(RequestOptions requestOptions) {
        return postLedgerEntryWithResponseAsync(requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     subLedgerId: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return returned as a result of a write to the Confidential Ledger, the transaction id in the response indicates
     *     when the write will become durable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData postLedgerEntry(RequestOptions requestOptions) {
        return postLedgerEntryAsync(requestOptions).block();
    }

    /**
     * To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To
     * prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the
     * response, or if the loading is still ongoing.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     entry: {
     *         contents: String
     *         subLedgerId: String
     *         transactionId: String
     *     }
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the result of querying for a ledger entry from an older transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLedgerEntryWithResponseAsync(
            String transactionId, RequestOptions requestOptions) {
        return service.getLedgerEntry(
                this.client.getLedgerUri(), this.client.getApiVersion(), transactionId, requestOptions);
    }

    /**
     * To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To
     * prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the
     * response, or if the loading is still ongoing.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     entry: {
     *         contents: String
     *         subLedgerId: String
     *         transactionId: String
     *     }
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the result of querying for a ledger entry from an older transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getLedgerEntryAsync(String transactionId, RequestOptions requestOptions) {
        return getLedgerEntryWithResponseAsync(transactionId, requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To
     * prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the
     * response, or if the loading is still ongoing.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     entry: {
     *         contents: String
     *         subLedgerId: String
     *         transactionId: String
     *     }
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the result of querying for a ledger entry from an older transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getLedgerEntry(String transactionId, RequestOptions requestOptions) {
        return getLedgerEntryAsync(transactionId, requestOptions).block();
    }

    /**
     * Gets a receipt certifying ledger contents at a particular transaction id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     receipt: {
     *         leaf: String
     *         nodeId: String
     *         proof: [
     *             {
     *                 left: String
     *                 right: String
     *             }
     *         ]
     *         root: String
     *         signature: String
     *     }
     *     state: String(Loading/Ready)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a receipt certifying ledger contents at a particular transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReceiptWithResponseAsync(String transactionId, RequestOptions requestOptions) {
        return service.getReceipt(
                this.client.getLedgerUri(), this.client.getApiVersion(), transactionId, requestOptions);
    }

    /**
     * Gets a receipt certifying ledger contents at a particular transaction id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     receipt: {
     *         leaf: String
     *         nodeId: String
     *         proof: [
     *             {
     *                 left: String
     *                 right: String
     *             }
     *         ]
     *         root: String
     *         signature: String
     *     }
     *     state: String(Loading/Ready)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a receipt certifying ledger contents at a particular transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getReceiptAsync(String transactionId, RequestOptions requestOptions) {
        return getReceiptWithResponseAsync(transactionId, requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a receipt certifying ledger contents at a particular transaction id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     receipt: {
     *         leaf: String
     *         nodeId: String
     *         proof: [
     *             {
     *                 left: String
     *                 right: String
     *             }
     *         ]
     *         root: String
     *         signature: String
     *     }
     *     state: String(Loading/Ready)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a receipt certifying ledger contents at a particular transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getReceipt(String transactionId, RequestOptions requestOptions) {
        return getReceiptAsync(transactionId, requestOptions).block();
    }

    /**
     * Gets the status of an entry identified by a transaction id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Committed/Pending)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the status of an entry identified by a transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTransactionStatusWithResponseAsync(
            String transactionId, RequestOptions requestOptions) {
        return service.getTransactionStatus(
                this.client.getLedgerUri(), this.client.getApiVersion(), transactionId, requestOptions);
    }

    /**
     * Gets the status of an entry identified by a transaction id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Committed/Pending)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the status of an entry identified by a transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getTransactionStatusAsync(String transactionId, RequestOptions requestOptions) {
        return getTransactionStatusWithResponseAsync(transactionId, requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the status of an entry identified by a transaction id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Committed/Pending)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the status of an entry identified by a transaction id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTransactionStatus(String transactionId, RequestOptions requestOptions) {
        return getTransactionStatusAsync(transactionId, requestOptions).block();
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return an entry in the ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCurrentLedgerEntryWithResponseAsync(RequestOptions requestOptions) {
        return service.getCurrentLedgerEntry(this.client.getLedgerUri(), this.client.getApiVersion(), requestOptions);
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return an entry in the ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getCurrentLedgerEntryAsync(RequestOptions requestOptions) {
        return getCurrentLedgerEntryWithResponseAsync(requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>No</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return an entry in the ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getCurrentLedgerEntry(RequestOptions requestOptions) {
        return getCurrentLedgerEntryAsync(requestOptions).block();
    }

    /**
     * Deletes a user from the Confidential Ledger.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteUserWithResponseAsync(String userId, RequestOptions requestOptions) {
        return service.deleteUser(this.client.getLedgerUri(), this.client.getApiVersion(), userId, requestOptions);
    }

    /**
     * Deletes a user from the Confidential Ledger.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteUserAsync(String userId, RequestOptions requestOptions) {
        return deleteUserWithResponseAsync(userId, requestOptions).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a user from the Confidential Ledger.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUser(String userId, RequestOptions requestOptions) {
        deleteUserAsync(userId, requestOptions).block();
    }

    /**
     * Gets a user.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUserWithResponseAsync(String userId, RequestOptions requestOptions) {
        return service.getUser(this.client.getLedgerUri(), this.client.getApiVersion(), userId, requestOptions);
    }

    /**
     * Gets a user.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getUserAsync(String userId, RequestOptions requestOptions) {
        return getUserWithResponseAsync(userId, requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a user.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getUser(String userId, RequestOptions requestOptions) {
        return getUserAsync(userId, requestOptions).block();
    }

    /**
     * A JSON merge patch is applied for existing users.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param userDetails Details about a Confidential Ledger user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return details about a Confidential Ledger user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateUserWithResponseAsync(
            String userId, BinaryData userDetails, RequestOptions requestOptions) {
        return service.createOrUpdateUser(
                this.client.getLedgerUri(), this.client.getApiVersion(), userId, userDetails, requestOptions);
    }

    /**
     * A JSON merge patch is applied for existing users.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param userDetails Details about a Confidential Ledger user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return details about a Confidential Ledger user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> createOrUpdateUserAsync(
            String userId, BinaryData userDetails, RequestOptions requestOptions) {
        return createOrUpdateUserWithResponseAsync(userId, userDetails, requestOptions)
                .flatMap(
                        (Response<BinaryData> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * A JSON merge patch is applied for existing users.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @param userDetails Details about a Confidential Ledger user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return details about a Confidential Ledger user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData createOrUpdateUser(String userId, BinaryData userDetails, RequestOptions requestOptions) {
        return createOrUpdateUserAsync(userId, userDetails, requestOptions).block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     nextLink: String
     *     entries: [
     *         {
     *             contents: String
     *             subLedgerId: String
     *             transactionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return paginated ledger entries returned in response to a query.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> getLedgerEntriesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return service.getLedgerEntriesNext(nextLink, this.client.getLedgerUri(), requestOptions)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "entries"),
                                        getNextLink(res.getValue(), "@nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
